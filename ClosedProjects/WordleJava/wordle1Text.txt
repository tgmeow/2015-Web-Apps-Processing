Overview Package Class Use Tree Deprecated Index Help Java™ Platform
Standard Ed. 7 Prev ClassNext ClassFramesNo FramesAll Classes Summary: Nested | Field | Constr | MethodDetail: Field | Constr | Method
java.util
Class TreeMap<K,V>

java.lang.Object
java.util.AbstractMap<K,V>
java.util.TreeMap<K,V>
Type Parameters:
K - the type of keys maintained by this map
V - the type of mapped values
All Implemented Interfaces:
Serializable, Cloneable, Map<K,V>, NavigableMap<K,V>, SortedMap<K,V>

public class TreeMap<K,V>
extends AbstractMap<K,V>
implements NavigableMap<K,V>, Cloneable, Serializable
A Red-Black tree based NavigableMap implementation. The map is sorted according to the natural ordering of its keys, or by a Comparator provided at map creation time, depending on which constructor is used.
This implementation provides guaranteed log(n) time cost for the containsKey, get, put and remove operations. Algorithms are adaptations of those in Cormen, Leiserson, and Rivest's Introduction to Algorithms.

Note that the ordering maintained by a tree map, like any sorted map, and whether or not an explicit comparator is provided, must be consistent with equals if this sorted map is to correctly implement the Map interface. (See Comparable or Comparator for a precise definition of consistent with equals.) This is so because the Map interface is defined in terms of the equals operation, but a sorted map performs all key comparisons using its compareTo (or compare) method, so two keys that are deemed equal by this method are, from the standpoint of the sorted map, equal. The behavior of a sorted map is well-defined even if its ordering is inconsistent with equals; it just fails to obey the general contract of the Map interface.

Note that this implementation is not synchronized. If multiple threads access a map concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally. (A structural modification is any operation that adds or deletes one or more mappings; merely changing the value associated with an existing key is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be "wrapped" using the Collections.synchronizedSortedMap method. This is best done at creation time, to prevent accidental unsynchronized access to the map:

   SortedMap m = Collections.synchronizedSortedMap(new TreeMap(...));
The iterators returned by the iterator method of the collections returned by all of this class's "collection view methods" are fail-fast: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own remove method, the iterator will throw a ConcurrentModificationException. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future.

Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw ConcurrentModificationException on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: the fail-fast behavior of iterators should be used only to detect bugs.

All Map.Entry pairs returned by methods in this class and its views represent snapshots of mappings at the time they were produced. They do not support the Entry.setValue method. (Note however that it is possible to change mappings in the associated map using put.)

This class is a member of the Java Collections Framework.

Since:
1.2
See Also:
Map, HashMap, Hashtable, Comparable, Comparator, Collection, Serialized Form
Nested Class Summary

Nested classes/interfaces inherited from class java.util.AbstractMap
AbstractMap.SimpleEntry<K,V>, AbstractMap.SimpleImmutableEntry<K,V>
Constructor Summary

Constructors 
Constructor and Description
TreeMap()
Constructs a new, empty tree map, using the natural ordering of its keys.
TreeMap(Comparator<? super K> comparator)
Constructs a new, empty tree map, ordered according to the given comparator.
TreeMap(Map<? extends K,? extends V> m)
Constructs a new tree map containing the same mappings as the given map, ordered according to the natural ordering of its keys.
TreeMap(SortedMap<K,? extends V> m)
Constructs a new tree map containing the same mappings and using the same ordering as the specified sorted map.
Method Summary

Methods 
Modifier and Type	Method and Description
Map.Entry<K,V>	ceilingEntry(K key)
Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.
K	ceilingKey(K key)
Returns the least key greater than or equal to the given key, or null if there is no such key.
void	clear()
Removes all of the mappings from this map.
Object	clone()
Returns a shallow copy of this TreeMap instance.
Comparator<? super K>	comparator()
Returns the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys.
boolean	containsKey(Object key)
Returns true if this map contains a mapping for the specified key.
boolean	containsValue(Object value)
Returns true if this map maps one or more keys to the specified value.
NavigableSet<K>	descendingKeySet()
Returns a reverse order NavigableSet view of the keys contained in this map.
NavigableMap<K,V>	descendingMap()
Returns a reverse order view of the mappings contained in this map.
Set<Map.Entry<K,V>>	entrySet()
Returns a Set view of the mappings contained in this map.
Map.Entry<K,V>	firstEntry()
Returns a key-value mapping associated with the least key in this map, or null if the map is empty.
K	firstKey()
Returns the first (lowest) key currently in this map.
Map.Entry<K,V>	floorEntry(K key)
Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.
K	floorKey(K key)
Returns the greatest key less than or equal to the given key, or null if there is no such key.
V	get(Object key)
Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
SortedMap<K,V>	headMap(K toKey)
Returns a view of the portion of this map whose keys are strictly less than toKey.
NavigableMap<K,V>	headMap(K toKey, boolean inclusive)
Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey.
Map.Entry<K,V>	higherEntry(K key)
Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.
K	higherKey(K key)
Returns the least key strictly greater than the given key, or null if there is no such key.
Set<K>	keySet()
Returns a Set view of the keys contained in this map.
Map.Entry<K,V>	lastEntry()
Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.
K	lastKey()
Returns the last (highest) key currently in this map.
Map.Entry<K,V>	lowerEntry(K key)
Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.
K	lowerKey(K key)
Returns the greatest key strictly less than the given key, or null if there is no such key.
NavigableSet<K>	navigableKeySet()
Returns a NavigableSet view of the keys contained in this map.
Map.Entry<K,V>	pollFirstEntry()
Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.
Map.Entry<K,V>	pollLastEntry()
Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.
V	put(K key, V value)
Associates the specified value with the specified key in this map.
void	putAll(Map<? extends K,? extends V> map)
Copies all of the mappings from the specified map to this map.
V	remove(Object key)
Removes the mapping for this key from this TreeMap if present.
int	size()
Returns the number of key-value mappings in this map.
NavigableMap<K,V>	subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)
Returns a view of the portion of this map whose keys range from fromKey to toKey.
SortedMap<K,V>	subMap(K fromKey, K toKey)
Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive.
SortedMap<K,V>	tailMap(K fromKey)
Returns a view of the portion of this map whose keys are greater than or equal to fromKey.
NavigableMap<K,V>	tailMap(K fromKey, boolean inclusive)
Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey.
Collection<V>	values()
Returns a Collection view of the values contained in this map.
Methods inherited from class java.util.AbstractMap
equals, hashCode, isEmpty, toString
Methods inherited from class java.lang.Object
finalize, getClass, notify, notifyAll, wait, wait, wait
Methods inherited from interface java.util.Map
equals, hashCode, isEmpty
Constructor Detail

TreeMap
public TreeMap()
Constructs a new, empty tree map, using the natural ordering of its keys. All keys inserted into the map must implement the Comparable interface. Furthermore, all such keys must be mutually comparable: k1.compareTo(k2) must not throw a ClassCastException for any keys k1 and k2 in the map. If the user attempts to put a key into the map that violates this constraint (for example, the user attempts to put a string key into a map whose keys are integers), the put(Object key, Object value) call will throw a ClassCastException.
TreeMap
public TreeMap(Comparator<? super K> comparator)
Constructs a new, empty tree map, ordered according to the given comparator. All keys inserted into the map must be mutually comparable by the given comparator: comparator.compare(k1, k2) must not throw a ClassCastException for any keys k1 and k2 in the map. If the user attempts to put a key into the map that violates this constraint, the put(Object key, Object value) call will throw a ClassCastException.
Parameters:
comparator - the comparator that will be used to order this map. If null, the natural ordering of the keys will be used.
TreeMap
public TreeMap(Map<? extends K,? extends V> m)
Constructs a new tree map containing the same mappings as the given map, ordered according to the natural ordering of its keys. All keys inserted into the new map must implement the Comparable interface. Furthermore, all such keys must be mutually comparable: k1.compareTo(k2) must not throw a ClassCastException for any keys k1 and k2 in the map. This method runs in n*log(n) time.
Parameters:
m - the map whose mappings are to be placed in this map
Throws:
ClassCastException - if the keys in m are not Comparable, or are not mutually comparable
NullPointerException - if the specified map is null
TreeMap
public TreeMap(SortedMap<K,? extends V> m)
Constructs a new tree map containing the same mappings and using the same ordering as the specified sorted map. This method runs in linear time.
Parameters:
m - the sorted map whose mappings are to be placed in this map, and whose comparator is to be used to sort this map
Throws:
NullPointerException - if the specified map is null
Method Detail

size
public int size()
Returns the number of key-value mappings in this map.
Specified by:
size in interface Map<K,V>
Overrides:
size in class AbstractMap<K,V>
Returns:
the number of key-value mappings in this map
containsKey
public boolean containsKey(Object key)
Returns true if this map contains a mapping for the specified key.
Specified by:
containsKey in interface Map<K,V>
Overrides:
containsKey in class AbstractMap<K,V>
Parameters:
key - key whose presence in this map is to be tested
Returns:
true if this map contains a mapping for the specified key
Throws:
ClassCastException - if the specified key cannot be compared with the keys currently in the map
NullPointerException - if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys
containsValue
public boolean containsValue(Object value)
Returns true if this map maps one or more keys to the specified value. More formally, returns true if and only if this map contains at least one mapping to a value v such that (value==null ? v==null : value.equals(v)). This operation will probably require time linear in the map size for most implementations.
Specified by:
containsValue in interface Map<K,V>
Overrides:
containsValue in class AbstractMap<K,V>
Parameters:
value - value whose presence in this map is to be tested
Returns:
true if a mapping to value exists; false otherwise
Since:
1.2
get
public V get(Object key)
Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
More formally, if this map contains a mapping from a key k to a value v such that key compares equal to k according to the map's ordering, then this method returns v; otherwise it returns null. (There can be at most one such mapping.)

A return value of null does not necessarily indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to null. The containsKey operation may be used to distinguish these two cases.

Specified by:
get in interface Map<K,V>
Overrides:
get in class AbstractMap<K,V>
Parameters:
key - the key whose associated value is to be returned
Returns:
the value to which the specified key is mapped, or null if this map contains no mapping for the key
Throws:
ClassCastException - if the specified key cannot be compared with the keys currently in the map
NullPointerException - if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys
comparator
public Comparator<? super K> comparator()
Description copied from interface: SortedMap
Returns the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys.
Specified by:
comparator in interface SortedMap<K,V>
Returns:
the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys
firstKey
public K firstKey()
Description copied from interface: SortedMap
Returns the first (lowest) key currently in this map.
Specified by:
firstKey in interface SortedMap<K,V>
Returns:
the first (lowest) key currently in this map
Throws:
NoSuchElementException - if this map is empty
lastKey
public K lastKey()
Description copied from interface: SortedMap
Returns the last (highest) key currently in this map.
Specified by:
lastKey in interface SortedMap<K,V>
Returns:
the last (highest) key currently in this map
Throws:
NoSuchElementException - if this map is empty
putAll
public void putAll(Map<? extends K,? extends V> map)
Copies all of the mappings from the specified map to this map. These mappings replace any mappings that this map had for any of the keys currently in the specified map.
Specified by:
putAll in interface Map<K,V>
Overrides:
putAll in class AbstractMap<K,V>
Parameters:
map - mappings to be stored in this map
Throws:
ClassCastException - if the class of a key or value in the specified map prevents it from being stored in this map
NullPointerException - if the specified map is null or the specified map contains a null key and this map does not permit null keys
put
public V put(K key,
    V value)
Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.
Specified by:
put in interface Map<K,V>
Overrides:
put in class AbstractMap<K,V>
Parameters:
key - key with which the specified value is to be associated
value - value to be associated with the specified key
Returns:
the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)
Throws:
ClassCastException - if the specified key cannot be compared with the keys currently in the map
NullPointerException - if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys
remove
public V remove(Object key)
Removes the mapping for this key from this TreeMap if present.
Specified by:
remove in interface Map<K,V>
Overrides:
remove in class AbstractMap<K,V>
Parameters:
key - key for which mapping should be removed
Returns:
the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)
Throws:
ClassCastException - if the specified key cannot be compared with the keys currently in the map
NullPointerException - if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys
clear
public void clear()
Removes all of the mappings from this map. The map will be empty after this call returns.
Specified by:
clear in interface Map<K,V>
Overrides:
clear in class AbstractMap<K,V>
clone
public Object clone()
Returns a shallow copy of this TreeMap instance. (The keys and values themselves are not cloned.)
Overrides:
clone in class AbstractMap<K,V>
Returns:
a shallow copy of this map
See Also:
Cloneable
firstEntry
public Map.Entry<K,V> firstEntry()
Description copied from interface: NavigableMap
Returns a key-value mapping associated with the least key in this map, or null if the map is empty.
Specified by:
firstEntry in interface NavigableMap<K,V>
Returns:
an entry with the least key, or null if this map is empty
Since:
1.6
lastEntry
public Map.Entry<K,V> lastEntry()
Description copied from interface: NavigableMap
Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.
Specified by:
lastEntry in interface NavigableMap<K,V>
Returns:
an entry with the greatest key, or null if this map is empty
Since:
1.6
pollFirstEntry
public Map.Entry<K,V> pollFirstEntry()
Description copied from interface: NavigableMap
Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.
Specified by:
pollFirstEntry in interface NavigableMap<K,V>
Returns:
the removed first entry of this map, or null if this map is empty
Since:
1.6
pollLastEntry
public Map.Entry<K,V> pollLastEntry()
Description copied from interface: NavigableMap
Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.
Specified by:
pollLastEntry in interface NavigableMap<K,V>
Returns:
the removed last entry of this map, or null if this map is empty
Since:
1.6
lowerEntry
public Map.Entry<K,V> lowerEntry(K key)
Description copied from interface: NavigableMap
Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.
Specified by:
lowerEntry in interface NavigableMap<K,V>
Parameters:
key - the key
Returns:
an entry with the greatest key less than key, or null if there is no such key
Throws:
ClassCastException - if the specified key cannot be compared with the keys currently in the map
NullPointerException - if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys
Since:
1.6
lowerKey
public K lowerKey(K key)
Description copied from interface: NavigableMap
Returns the greatest key strictly less than the given key, or null if there is no such key.
Specified by:
lowerKey in interface NavigableMap<K,V>
Parameters:
key - the key
Returns:
the greatest key less than key, or null if there is no such key
Throws:
ClassCastException - if the specified key cannot be compared with the keys currently in the map
NullPointerException - if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys
Since:
1.6
floorEntry
public Map.Entry<K,V> floorEntry(K key)
Description copied from interface: NavigableMap
Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.
Specified by:
floorEntry in interface NavigableMap<K,V>
Parameters:
key - the key
Returns:
an entry with the greatest key less than or equal to key, or null if there is no such key
Throws:
ClassCastException - if the specified key cannot be compared with the keys currently in the map
NullPointerException - if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys
Since:
1.6
floorKey
public K floorKey(K key)
Description copied from interface: NavigableMap
Returns the greatest key less than or equal to the given key, or null if there is no such key.
Specified by:
floorKey in interface NavigableMap<K,V>
Parameters:
key - the key
Returns:
the greatest key less than or equal to key, or null if there is no such key
Throws:
ClassCastException - if the specified key cannot be compared with the keys currently in the map
NullPointerException - if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys
Since:
1.6
ceilingEntry
public Map.Entry<K,V> ceilingEntry(K key)
Description copied from interface: NavigableMap
Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.
Specified by:
ceilingEntry in interface NavigableMap<K,V>
Parameters:
key - the key
Returns:
an entry with the least key greater than or equal to key, or null if there is no such key
Throws:
ClassCastException - if the specified key cannot be compared with the keys currently in the map
NullPointerException - if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys
Since:
1.6
ceilingKey
public K ceilingKey(K key)
Description copied from interface: NavigableMap
Returns the least key greater than or equal to the given key, or null if there is no such key.
Specified by:
ceilingKey in interface NavigableMap<K,V>
Parameters:
key - the key
Returns:
the least key greater than or equal to key, or null if there is no such key
Throws:
ClassCastException - if the specified key cannot be compared with the keys currently in the map
NullPointerException - if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys
Since:
1.6
higherEntry
public Map.Entry<K,V> higherEntry(K key)
Description copied from interface: NavigableMap
Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.
Specified by:
higherEntry in interface NavigableMap<K,V>
Parameters:
key - the key
Returns:
an entry with the least key greater than key, or null if there is no such key
Throws:
ClassCastException - if the specified key cannot be compared with the keys currently in the map
NullPointerException - if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys
Since:
1.6
higherKey
public K higherKey(K key)
Description copied from interface: NavigableMap
Returns the least key strictly greater than the given key, or null if there is no such key.
Specified by:
higherKey in interface NavigableMap<K,V>
Parameters:
key - the key
Returns:
the least key greater than key, or null if there is no such key
Throws:
ClassCastException - if the specified key cannot be compared with the keys currently in the map
NullPointerException - if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys
Since:
1.6
keySet
public Set<K> keySet()
Returns a Set view of the keys contained in this map. The set's iterator returns the keys in ascending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.
Specified by:
keySet in interface Map<K,V>
Specified by:
keySet in interface SortedMap<K,V>
Overrides:
keySet in class AbstractMap<K,V>
Returns:
a set view of the keys contained in this map
navigableKeySet
public NavigableSet<K> navigableKeySet()
Description copied from interface: NavigableMap
Returns a NavigableSet view of the keys contained in this map. The set's iterator returns the keys in ascending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.
Specified by:
navigableKeySet in interface NavigableMap<K,V>
Returns:
a navigable set view of the keys in this map
Since:
1.6
descendingKeySet
public NavigableSet<K> descendingKeySet()
Description copied from interface: NavigableMap
Returns a reverse order NavigableSet view of the keys contained in this map. The set's iterator returns the keys in descending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.
Specified by:
descendingKeySet in interface NavigableMap<K,V>
Returns:
a reverse order navigable set view of the keys in this map
Since:
1.6
values
public Collection<V> values()
Returns a Collection view of the values contained in this map. The collection's iterator returns the values in ascending order of the corresponding keys. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Collection.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations.
Specified by:
values in interface Map<K,V>
Specified by:
values in interface SortedMap<K,V>
Overrides:
values in class AbstractMap<K,V>
Returns:
a collection view of the values contained in this map
entrySet
public Set<Map.Entry<K,V>> entrySet()
Returns a Set view of the mappings contained in this map. The set's iterator returns the entries in ascending key order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation, or through the setValue operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations.
Specified by:
entrySet in interface Map<K,V>
Specified by:
entrySet in interface SortedMap<K,V>
Specified by:
entrySet in class AbstractMap<K,V>
Returns:
a set view of the mappings contained in this map
descendingMap
public NavigableMap<K,V> descendingMap()
Description copied from interface: NavigableMap
Returns a reverse order view of the mappings contained in this map. The descending map is backed by this map, so changes to the map are reflected in the descending map, and vice-versa. If either map is modified while an iteration over a collection view of either map is in progress (except through the iterator's own remove operation), the results of the iteration are undefined.
The returned map has an ordering equivalent to Collections.reverseOrder(comparator()). The expression m.descendingMap().descendingMap() returns a view of m essentially equivalent to m.

Specified by:
descendingMap in interface NavigableMap<K,V>
Returns:
a reverse order view of this map
Since:
1.6
subMap
public NavigableMap<K,V> subMap(K fromKey,
                       boolean fromInclusive,
                       K toKey,
                       boolean toInclusive)
Description copied from interface: NavigableMap
Returns a view of the portion of this map whose keys range from fromKey to toKey. If fromKey and toKey are equal, the returned map is empty unless fromInclusive and toInclusive are both true. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports.
The returned map will throw an IllegalArgumentException on an attempt to insert a key outside of its range, or to construct a submap either of whose endpoints lie outside its range.

Specified by:
subMap in interface NavigableMap<K,V>
Parameters:
fromKey - low endpoint of the keys in the returned map
fromInclusive - true if the low endpoint is to be included in the returned view
toKey - high endpoint of the keys in the returned map
toInclusive - true if the high endpoint is to be included in the returned view
Returns:
a view of the portion of this map whose keys range from fromKey to toKey
Throws:
ClassCastException - if fromKey and toKey cannot be compared to one another using this map's comparator (or, if the map has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if fromKey or toKey cannot be compared to keys currently in the map.
NullPointerException - if fromKey or toKey is null and this map uses natural ordering, or its comparator does not permit null keys
IllegalArgumentException - if fromKey is greater than toKey; or if this map itself has a restricted range, and fromKey or toKey lies outside the bounds of the range
Since:
1.6
headMap
public NavigableMap<K,V> headMap(K toKey,
                        boolean inclusive)
Description copied from interface: NavigableMap
Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports.
The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.

Specified by:
headMap in interface NavigableMap<K,V>
Parameters:
toKey - high endpoint of the keys in the returned map
inclusive - true if the high endpoint is to be included in the returned view
Returns:
a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey
Throws:
ClassCastException - if toKey is not compatible with this map's comparator (or, if the map has no comparator, if toKey does not implement Comparable). Implementations may, but are not required to, throw this exception if toKey cannot be compared to keys currently in the map.
NullPointerException - if toKey is null and this map uses natural ordering, or its comparator does not permit null keys
IllegalArgumentException - if this map itself has a restricted range, and toKey lies outside the bounds of the range
Since:
1.6
tailMap
public NavigableMap<K,V> tailMap(K fromKey,
                        boolean inclusive)
Description copied from interface: NavigableMap
Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports.
The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.

Specified by:
tailMap in interface NavigableMap<K,V>
Parameters:
fromKey - low endpoint of the keys in the returned map
inclusive - true if the low endpoint is to be included in the returned view
Returns:
a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey
Throws:
ClassCastException - if fromKey is not compatible with this map's comparator (or, if the map has no comparator, if fromKey does not implement Comparable). Implementations may, but are not required to, throw this exception if fromKey cannot be compared to keys currently in the map.
NullPointerException - if fromKey is null and this map uses natural ordering, or its comparator does not permit null keys
IllegalArgumentException - if this map itself has a restricted range, and fromKey lies outside the bounds of the range
Since:
1.6
subMap
public SortedMap<K,V> subMap(K fromKey,
                    K toKey)
Description copied from interface: NavigableMap
Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive. (If fromKey and toKey are equal, the returned map is empty.) The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports.
The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.

Equivalent to subMap(fromKey, true, toKey, false).

Specified by:
subMap in interface NavigableMap<K,V>
Specified by:
subMap in interface SortedMap<K,V>
Parameters:
fromKey - low endpoint (inclusive) of the keys in the returned map
toKey - high endpoint (exclusive) of the keys in the returned map
Returns:
a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive
Throws:
ClassCastException - if fromKey and toKey cannot be compared to one another using this map's comparator (or, if the map has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if fromKey or toKey cannot be compared to keys currently in the map.
NullPointerException - if fromKey or toKey is null and this map uses natural ordering, or its comparator does not permit null keys
IllegalArgumentException - if fromKey is greater than toKey; or if this map itself has a restricted range, and fromKey or toKey lies outside the bounds of the range
headMap
public SortedMap<K,V> headMap(K toKey)
Description copied from interface: NavigableMap
Returns a view of the portion of this map whose keys are strictly less than toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports.
The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.

Equivalent to headMap(toKey, false).

Specified by:
headMap in interface NavigableMap<K,V>
Specified by:
headMap in interface SortedMap<K,V>
Parameters:
toKey - high endpoint (exclusive) of the keys in the returned map
Returns:
a view of the portion of this map whose keys are strictly less than toKey
Throws:
ClassCastException - if toKey is not compatible with this map's comparator (or, if the map has no comparator, if toKey does not implement Comparable). Implementations may, but are not required to, throw this exception if toKey cannot be compared to keys currently in the map.
NullPointerException - if toKey is null and this map uses natural ordering, or its comparator does not permit null keys
IllegalArgumentException - if this map itself has a restricted range, and toKey lies outside the bounds of the range
tailMap
public SortedMap<K,V> tailMap(K fromKey)
Description copied from interface: NavigableMap
Returns a view of the portion of this map whose keys are greater than or equal to fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports.
The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.

Equivalent to tailMap(fromKey, true).

Specified by:
tailMap in interface NavigableMap<K,V>
Specified by:
tailMap in interface SortedMap<K,V>
Parameters:
fromKey - low endpoint (inclusive) of the keys in the returned map
Returns:
a view of the portion of this map whose keys are greater than or equal to fromKey
Throws:
ClassCastException - if fromKey is not compatible with this map's comparator (or, if the map has no comparator, if fromKey does not implement Comparable). Implementations may, but are not required to, throw this exception if fromKey cannot be compared to keys currently in the map.
NullPointerException - if fromKey is null and this map uses natural ordering, or its comparator does not permit null keys
IllegalArgumentException - if this map itself has a restricted range, and fromKey lies outside the bounds of the range
OverviewPackageClassUseTreeDeprecatedIndexHelp Java™ Platform
Standard Ed. 7 Prev ClassNext ClassFramesNo FramesAll Classes Summary: Nested | Field | Constr | MethodDetail: Field | Constr | Method
Submit a bug or feature 
For further API reference and developer documentation, see Java SE Documentation. That documentation contains more detailed, developer-targeted descriptions, with conceptual overviews, definitions of terms, workarounds, and working code examples.
Copyright © 1993, 2016, Oracle and/or its affiliates. All rights reserved. Use is subject to license terms. Also see the documentation redistribution policy.

SKIP NAVIGATION LINKS OVERVIEW PACKAGE CLASS USE TREE DEPRECATED INDEX HELP Java™ Platform
Standard Ed. 8 PREV CLASSNEXT CLASSFRAMESNO FRAMESALL CLASSESSUMMARY: NESTED | FIELD | CONSTR | METHODDETAIL: FIELD | CONSTR | METHOD
compact1, compact2, compact3
java.util
Interface List<E>

Type Parameters:
E - the type of elements in this list
All Superinterfaces:
Collection<E>, Iterable<E>
All Known Implementing Classes:
AbstractList, AbstractSequentialList, ArrayList, AttributeList, CopyOnWriteArrayList, LinkedList, RoleList, RoleUnresolvedList, Stack, Vector

public interface List<E>
extends Collection<E>
An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.
Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements e1 and e2 such that e1.equals(e2), and they typically allow multiple null elements if they allow null elements at all. It is not inconceivable that someone might wish to implement a list that prohibits duplicates, by throwing runtime exceptions when the user attempts to insert them, but we expect this usage to be rare.

The List interface places additional stipulations, beyond those specified in the Collection interface, on the contracts of the iterator, add, remove, equals, and hashCode methods. Declarations for other inherited methods are also included here for convenience.

The List interface provides four methods for positional (indexed) access to list elements. Lists (like Java arrays) are zero based. Note that these operations may execute in time proportional to the index value for some implementations (the LinkedList class, for example). Thus, iterating over the elements in a list is typically preferable to indexing through it if the caller does not know the implementation.

The List interface provides a special iterator, called a ListIterator, that allows element insertion and replacement, and bidirectional access in addition to the normal operations that the Iterator interface provides. A method is provided to obtain a list iterator that starts at a specified position in the list.

The List interface provides two methods to search for a specified object. From a performance standpoint, these methods should be used with caution. In many implementations they will perform costly linear searches.

The List interface provides two methods to efficiently insert and remove multiple elements at an arbitrary point in the list.

Note: While it is permissible for lists to contain themselves as elements, extreme caution is advised: the equals and hashCode methods are no longer well defined on such a list.

Some list implementations have restrictions on the elements that they may contain. For example, some implementations prohibit null elements, and some have restrictions on the types of their elements. Attempting to add an ineligible element throws an unchecked exception, typically NullPointerException or ClassCastException. Attempting to query the presence of an ineligible element may throw an exception, or it may simply return false; some implementations will exhibit the former behavior and some will exhibit the latter. More generally, attempting an operation on an ineligible element whose completion would not result in the insertion of an ineligible element into the list may throw an exception or it may succeed, at the option of the implementation. Such exceptions are marked as "optional" in the specification for this interface.

This interface is a member of the Java Collections Framework.

Since:
1.2
See Also:
Collection, Set, ArrayList, LinkedList, Vector, Arrays.asList(Object[]), Collections.nCopies(int, Object), Collections.EMPTY_LIST, AbstractList, AbstractSequentialList
Method Summary

All MethodsInstance MethodsAbstract MethodsDefault Methods
Modifier and Type	Method and Description
boolean	add(E e)
Appends the specified element to the end of this list (optional operation).
void	add(int index, E element)
Inserts the specified element at the specified position in this list (optional operation).
boolean	addAll(Collection<? extends E> c)
Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation).
boolean	addAll(int index, Collection<? extends E> c)
Inserts all of the elements in the specified collection into this list at the specified position (optional operation).
void	clear()
Removes all of the elements from this list (optional operation).
boolean	contains(Object o)
Returns true if this list contains the specified element.
boolean	containsAll(Collection<?> c)
Returns true if this list contains all of the elements of the specified collection.
boolean	equals(Object o)
Compares the specified object with this list for equality.
E	get(int index)
Returns the element at the specified position in this list.
int	hashCode()
Returns the hash code value for this list.
int	indexOf(Object o)
Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
boolean	isEmpty()
Returns true if this list contains no elements.
Iterator<E>	iterator()
Returns an iterator over the elements in this list in proper sequence.
int	lastIndexOf(Object o)
Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.
ListIterator<E>	listIterator()
Returns a list iterator over the elements in this list (in proper sequence).
ListIterator<E>	listIterator(int index)
Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.
E	remove(int index)
Removes the element at the specified position in this list (optional operation).
boolean	remove(Object o)
Removes the first occurrence of the specified element from this list, if it is present (optional operation).
boolean	removeAll(Collection<?> c)
Removes from this list all of its elements that are contained in the specified collection (optional operation).
default void	replaceAll(UnaryOperator<E> operator)
Replaces each element of this list with the result of applying the operator to that element.
boolean	retainAll(Collection<?> c)
Retains only the elements in this list that are contained in the specified collection (optional operation).
E	set(int index, E element)
Replaces the element at the specified position in this list with the specified element (optional operation).
int	size()
Returns the number of elements in this list.
default void	sort(Comparator<? super E> c)
Sorts this list according to the order induced by the specified Comparator.
default Spliterator<E>	spliterator()
Creates a Spliterator over the elements in this list.
List<E>	subList(int fromIndex, int toIndex)
Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.
Object[]	toArray()
Returns an array containing all of the elements in this list in proper sequence (from first to last element).
<T> T[]	toArray(T[] a)
Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.
Methods inherited from interface java.util.Collection
parallelStream, removeIf, stream
Methods inherited from interface java.lang.Iterable
forEach
Method Detail

size
int size()
Returns the number of elements in this list. If this list contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE.
Specified by:
size in interface Collection<E>
Returns:
the number of elements in this list
isEmpty
boolean isEmpty()
Returns true if this list contains no elements.
Specified by:
isEmpty in interface Collection<E>
Returns:
true if this list contains no elements
contains
boolean contains(Object o)
Returns true if this list contains the specified element. More formally, returns true if and only if this list contains at least one element e such that (o==null ? e==null : o.equals(e)).
Specified by:
contains in interface Collection<E>
Parameters:
o - element whose presence in this list is to be tested
Returns:
true if this list contains the specified element
Throws:
ClassCastException - if the type of the specified element is incompatible with this list (optional)
NullPointerException - if the specified element is null and this list does not permit null elements (optional)
iterator
Iterator<E> iterator()
Returns an iterator over the elements in this list in proper sequence.
Specified by:
iterator in interface Collection<E>
Specified by:
iterator in interface Iterable<E>
Returns:
an iterator over the elements in this list in proper sequence
toArray
Object[] toArray()
Returns an array containing all of the elements in this list in proper sequence (from first to last element).
The returned array will be "safe" in that no references to it are maintained by this list. (In other words, this method must allocate a new array even if this list is backed by an array). The caller is thus free to modify the returned array.

This method acts as bridge between array-based and collection-based APIs.

Specified by:
toArray in interface Collection<E>
Returns:
an array containing all of the elements in this list in proper sequence
See Also:
Arrays.asList(Object[])
toArray
<T> T[] toArray(T[] a)
Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array. If the list fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this list.
If the list fits in the specified array with room to spare (i.e., the array has more elements than the list), the element in the array immediately following the end of the list is set to null. (This is useful in determining the length of the list only if the caller knows that the list does not contain any null elements.)

Like the toArray() method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs.

Suppose x is a list known to contain only strings. The following code can be used to dump the list into a newly allocated array of String:


     String[] y = x.toArray(new String[0]);
 
Note that toArray(new Object[0]) is identical in function to toArray().
Specified by:
toArray in interface Collection<E>
Type Parameters:
T - the runtime type of the array to contain the collection
Parameters:
a - the array into which the elements of this list are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose.
Returns:
an array containing the elements of this list
Throws:
ArrayStoreException - if the runtime type of the specified array is not a supertype of the runtime type of every element in this list
NullPointerException - if the specified array is null
add
boolean add(E e)
Appends the specified element to the end of this list (optional operation).
Lists that support this operation may place limitations on what elements may be added to this list. In particular, some lists will refuse to add null elements, and others will impose restrictions on the type of elements that may be added. List classes should clearly specify in their documentation any restrictions on what elements may be added.

Specified by:
add in interface Collection<E>
Parameters:
e - element to be appended to this list
Returns:
true (as specified by Collection.add(E))
Throws:
UnsupportedOperationException - if the add operation is not supported by this list
ClassCastException - if the class of the specified element prevents it from being added to this list
NullPointerException - if the specified element is null and this list does not permit null elements
IllegalArgumentException - if some property of this element prevents it from being added to this list
remove
boolean remove(Object o)
Removes the first occurrence of the specified element from this list, if it is present (optional operation). If this list does not contain the element, it is unchanged. More formally, removes the element with the lowest index i such that (o==null ? get(i)==null : o.equals(get(i))) (if such an element exists). Returns true if this list contained the specified element (or equivalently, if this list changed as a result of the call).
Specified by:
remove in interface Collection<E>
Parameters:
o - element to be removed from this list, if present
Returns:
true if this list contained the specified element
Throws:
ClassCastException - if the type of the specified element is incompatible with this list (optional)
NullPointerException - if the specified element is null and this list does not permit null elements (optional)
UnsupportedOperationException - if the remove operation is not supported by this list
containsAll
boolean containsAll(Collection<?> c)
Returns true if this list contains all of the elements of the specified collection.
Specified by:
containsAll in interface Collection<E>
Parameters:
c - collection to be checked for containment in this list
Returns:
true if this list contains all of the elements of the specified collection
Throws:
ClassCastException - if the types of one or more elements in the specified collection are incompatible with this list (optional)
NullPointerException - if the specified collection contains one or more null elements and this list does not permit null elements (optional), or if the specified collection is null
See Also:
contains(Object)
addAll
boolean addAll(Collection<? extends E> c)
Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.)
Specified by:
addAll in interface Collection<E>
Parameters:
c - collection containing elements to be added to this list
Returns:
true if this list changed as a result of the call
Throws:
UnsupportedOperationException - if the addAll operation is not supported by this list
ClassCastException - if the class of an element of the specified collection prevents it from being added to this list
NullPointerException - if the specified collection contains one or more null elements and this list does not permit null elements, or if the specified collection is null
IllegalArgumentException - if some property of an element of the specified collection prevents it from being added to this list
See Also:
add(Object)
addAll
boolean addAll(int index,
               Collection<? extends E> c)
Inserts all of the elements in the specified collection into this list at the specified position (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection's iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.)
Parameters:
index - index at which to insert the first element from the specified collection
c - collection containing elements to be added to this list
Returns:
true if this list changed as a result of the call
Throws:
UnsupportedOperationException - if the addAll operation is not supported by this list
ClassCastException - if the class of an element of the specified collection prevents it from being added to this list
NullPointerException - if the specified collection contains one or more null elements and this list does not permit null elements, or if the specified collection is null
IllegalArgumentException - if some property of an element of the specified collection prevents it from being added to this list
IndexOutOfBoundsException - if the index is out of range (index < 0 || index > size())
removeAll
boolean removeAll(Collection<?> c)
Removes from this list all of its elements that are contained in the specified collection (optional operation).
Specified by:
removeAll in interface Collection<E>
Parameters:
c - collection containing elements to be removed from this list
Returns:
true if this list changed as a result of the call
Throws:
UnsupportedOperationException - if the removeAll operation is not supported by this list
ClassCastException - if the class of an element of this list is incompatible with the specified collection (optional)
NullPointerException - if this list contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null
See Also:
remove(Object), contains(Object)
retainAll
boolean retainAll(Collection<?> c)
Retains only the elements in this list that are contained in the specified collection (optional operation). In other words, removes from this list all of its elements that are not contained in the specified collection.
Specified by:
retainAll in interface Collection<E>
Parameters:
c - collection containing elements to be retained in this list
Returns:
true if this list changed as a result of the call
Throws:
UnsupportedOperationException - if the retainAll operation is not supported by this list
ClassCastException - if the class of an element of this list is incompatible with the specified collection (optional)
NullPointerException - if this list contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null
See Also:
remove(Object), contains(Object)
replaceAll
default void replaceAll(UnaryOperator<E> operator)
Replaces each element of this list with the result of applying the operator to that element. Errors or runtime exceptions thrown by the operator are relayed to the caller.
Implementation Requirements:
The default implementation is equivalent to, for this list:

     final ListIterator<E> li = list.listIterator();
     while (li.hasNext()) {
         li.set(operator.apply(li.next()));
     }
 
If the list's list-iterator does not support the set operation then an UnsupportedOperationException will be thrown when replacing the first element.
Parameters:
operator - the operator to apply to each element
Throws:
UnsupportedOperationException - if this list is unmodifiable. Implementations may throw this exception if an element cannot be replaced or if, in general, modification is not supported
NullPointerException - if the specified operator is null or if the operator result is a null value and this list does not permit null elements (optional)
Since:
1.8
sort
default void sort(Comparator<? super E> c)
Sorts this list according to the order induced by the specified Comparator.
All elements in this list must be mutually comparable using the specified comparator (that is, c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the list).

If the specified comparator is null then all elements in this list must implement the Comparable interface and the elements' natural ordering should be used.

This list must be modifiable, but need not be resizable.

Implementation Requirements:
The default implementation obtains an array containing all elements in this list, sorts the array, and iterates over this list resetting each element from the corresponding position in the array. (This avoids the n2 log(n) performance that would result from attempting to sort a linked list in place.)
Implementation Note:
This implementation is a stable, adaptive, iterative mergesort that requires far fewer than n lg(n) comparisons when the input array is partially sorted, while offering the performance of a traditional mergesort when the input array is randomly ordered. If the input array is nearly sorted, the implementation requires approximately n comparisons. Temporary storage requirements vary from a small constant for nearly sorted input arrays to n/2 object references for randomly ordered input arrays.
The implementation takes equal advantage of ascending and descending order in its input array, and can take advantage of ascending and descending order in different parts of the same input array. It is well-suited to merging two or more sorted arrays: simply concatenate the arrays and sort the resulting array.

The implementation was adapted from Tim Peters's list sort for Python ( TimSort). It uses techniques from Peter McIlroy's "Optimistic Sorting and Information Theoretic Complexity", in Proceedings of the Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474, January 1993.

Parameters:
c - the Comparator used to compare list elements. A null value indicates that the elements' natural ordering should be used
Throws:
ClassCastException - if the list contains elements that are not mutually comparable using the specified comparator
UnsupportedOperationException - if the list's list-iterator does not support the set operation
IllegalArgumentException - (optional) if the comparator is found to violate the Comparator contract
Since:
1.8
clear
void clear()
Removes all of the elements from this list (optional operation). The list will be empty after this call returns.
Specified by:
clear in interface Collection<E>
Throws:
UnsupportedOperationException - if the clear operation is not supported by this list
equals
boolean equals(Object o)
Compares the specified object with this list for equality. Returns true if and only if the specified object is also a list, both lists have the same size, and all corresponding pairs of elements in the two lists are equal. (Two elements e1 and e2 are equal if (e1==null ? e2==null : e1.equals(e2)).) In other words, two lists are defined to be equal if they contain the same elements in the same order. This definition ensures that the equals method works properly across different implementations of the List interface.
Specified by:
equals in interface Collection<E>
Overrides:
equals in class Object
Parameters:
o - the object to be compared for equality with this list
Returns:
true if the specified object is equal to this list
See Also:
Object.hashCode(), HashMap
hashCode
int hashCode()
Returns the hash code value for this list. The hash code of a list is defined to be the result of the following calculation:

     int hashCode = 1;
     for (E e : list)
         hashCode = 31*hashCode + (e==null ? 0 : e.hashCode());
 
This ensures that list1.equals(list2) implies that list1.hashCode()==list2.hashCode() for any two lists, list1 and list2, as required by the general contract of Object.hashCode().
Specified by:
hashCode in interface Collection<E>
Overrides:
hashCode in class Object
Returns:
the hash code value for this list
See Also:
Object.equals(Object), equals(Object)
get
E get(int index)
Returns the element at the specified position in this list.
Parameters:
index - index of the element to return
Returns:
the element at the specified position in this list
Throws:
IndexOutOfBoundsException - if the index is out of range (index < 0 || index >= size())
set
E set(int index,
      E element)
Replaces the element at the specified position in this list with the specified element (optional operation).
Parameters:
index - index of the element to replace
element - element to be stored at the specified position
Returns:
the element previously at the specified position
Throws:
UnsupportedOperationException - if the set operation is not supported by this list
ClassCastException - if the class of the specified element prevents it from being added to this list
NullPointerException - if the specified element is null and this list does not permit null elements
IllegalArgumentException - if some property of the specified element prevents it from being added to this list
IndexOutOfBoundsException - if the index is out of range (index < 0 || index >= size())
add
void add(int index,
         E element)
Inserts the specified element at the specified position in this list (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).
Parameters:
index - index at which the specified element is to be inserted
element - element to be inserted
Throws:
UnsupportedOperationException - if the add operation is not supported by this list
ClassCastException - if the class of the specified element prevents it from being added to this list
NullPointerException - if the specified element is null and this list does not permit null elements
IllegalArgumentException - if some property of the specified element prevents it from being added to this list
IndexOutOfBoundsException - if the index is out of range (index < 0 || index > size())
remove
E remove(int index)
Removes the element at the specified position in this list (optional operation). Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the list.
Parameters:
index - the index of the element to be removed
Returns:
the element previously at the specified position
Throws:
UnsupportedOperationException - if the remove operation is not supported by this list
IndexOutOfBoundsException - if the index is out of range (index < 0 || index >= size())
indexOf
int indexOf(Object o)
Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the lowest index i such that (o==null ? get(i)==null : o.equals(get(i))), or -1 if there is no such index.
Parameters:
o - element to search for
Returns:
the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element
Throws:
ClassCastException - if the type of the specified element is incompatible with this list (optional)
NullPointerException - if the specified element is null and this list does not permit null elements (optional)
lastIndexOf
int lastIndexOf(Object o)
Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the highest index i such that (o==null ? get(i)==null : o.equals(get(i))), or -1 if there is no such index.
Parameters:
o - element to search for
Returns:
the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element
Throws:
ClassCastException - if the type of the specified element is incompatible with this list (optional)
NullPointerException - if the specified element is null and this list does not permit null elements (optional)
listIterator
ListIterator<E> listIterator()
Returns a list iterator over the elements in this list (in proper sequence).
Returns:
a list iterator over the elements in this list (in proper sequence)
listIterator
ListIterator<E> listIterator(int index)
Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list. The specified index indicates the first element that would be returned by an initial call to next. An initial call to previous would return the element with the specified index minus one.
Parameters:
index - index of the first element to be returned from the list iterator (by a call to next)
Returns:
a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list
Throws:
IndexOutOfBoundsException - if the index is out of range (index < 0 || index > size())
subList
List<E> subList(int fromIndex,
                int toIndex)
Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive. (If fromIndex and toIndex are equal, the returned list is empty.) The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa. The returned list supports all of the optional list operations supported by this list.
This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays). Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list. For example, the following idiom removes a range of elements from a list:


      list.subList(from, to).clear();
 
Similar idioms may be constructed for indexOf and lastIndexOf, and all of the algorithms in the Collections class can be applied to a subList.
The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is structurally modified in any way other than via the returned list. (Structural modifications are those that change the size of this list, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results.)

Parameters:
fromIndex - low endpoint (inclusive) of the subList
toIndex - high endpoint (exclusive) of the subList
Returns:
a view of the specified range within this list
Throws:
IndexOutOfBoundsException - for an illegal endpoint index value (fromIndex < 0 || toIndex > size || fromIndex > toIndex)
spliterator
default Spliterator<E> spliterator()
Creates a Spliterator over the elements in this list.
The Spliterator reports Spliterator.SIZED and Spliterator.ORDERED. Implementations should document the reporting of additional characteristic values.

Specified by:
spliterator in interface Collection<E>
Specified by:
spliterator in interface Iterable<E>
Implementation Requirements:
The default implementation creates a late-binding spliterator from the list's Iterator. The spliterator inherits the fail-fast properties of the list's iterator.
Implementation Note:
The created Spliterator additionally reports Spliterator.SUBSIZED.
Returns:
a Spliterator over the elements in this list
Since:
1.8
SKIP NAVIGATION LINKS OVERVIEWPACKAGECLASSUSETREEDEPRECATEDINDEXHELP Java™ Platform
Standard Ed. 8 PREV CLASSNEXT CLASSFRAMESNO FRAMESALL CLASSES SUMMARY: NESTED | FIELD | CONSTR | METHODDETAIL: FIELD | CONSTR | METHOD
Submit a bug or feature 
For further API reference and developer documentation, see Java SE Documentation. That documentation contains more detailed, developer-targeted descriptions, with conceptual overviews, definitions of terms, workarounds, and working code examples.
Copyright © 1993, 2016, Oracle and/or its affiliates. All rights reserved. Use is subject to license terms. Also see the documentation redistribution policy.